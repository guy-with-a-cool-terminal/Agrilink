I have a JavaScript codebase in the /scripts folder. It is very large and unmaintainable.

Your task is to break the code into smaller, logically grouped files or modules for maintainability and clarity.

BUT:

🔴 Do not change anything.
🔴 Do not modify, optimize, rewrite, or improve any part of the code.
🔴 Do not change even one line of logic, UI, or flow.
🔴 Absolutely no change in behavior, output, or appearance is allowed.

✅ You are only allowed to:

    Split the existing code into smaller parts (based on functionality).

    Preserve all naming, order, structure, and logic.

    Use the current module system in place (ES6, CommonJS, etc.).

After splitting:

📝 Create a full documentation file (e.g., README.md) that:

    Explains everything the code does from start to finish.

    Describes what each new file/module does.

    Shows how the files connect and work together.

    Uses clear, non-technical language so a non-programmer can understand it.

    Is presentation-ready, easy to follow, and accurate.

❗ Bottom line:

    100% of the code’s behavior, output, and structure must remain untouched.

    This is a strict structural refactor only, followed by complete plain-language documentation.